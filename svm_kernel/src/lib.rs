
#![cfg_attr(test, no_main)]
#![feature(custom_test_frameworks)]
#![test_runner(crate::test_runner)]
#![reexport_test_harness_main = "test_main"]
#![feature(abi_x86_interrupt)]
#![no_std]

pub mod serial;
pub mod vga;
pub mod print;
pub mod mylog;
pub mod interrupts;
pub mod gdt;

/*
 * Use an exit code different from 0 and 1 to
 * differentiate between qemu error or kernel quit
 */
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u32)]
pub enum QemuExitCode {
    Success = 0x10,
    Failed = 0x11,
}

// Write to port 0xf4 to exit qemu
pub fn exit_qemu(exit_code: QemuExitCode) {
    use x86_64::instructions::port::Port;

    unsafe {
        let mut port = Port::new(0xf4);
        port.write(exit_code as u32);
    }
}

// All kernel inits summed up
pub fn init(){
    interrupts::init_idt();
    gdt::init();
    unsafe {
        interrupts::PICS.lock().initialize();
    };
    log::info!("Enabling interrupts");
    x86_64::instructions::interrupts::enable();
}

/*
 * TESTING CODE
 */
use core::panic::PanicInfo;

// Entry point for `cargo test`
#[cfg(test)]
#[no_mangle]
pub extern "C" fn _start() -> ! {

    init();

    // Function not visible because gets generated by cargo test
    // automatically
    test_main();
    loop {}
}

// panic hanlder called only in cargo test
#[cfg(test)]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    test_panic_handler(info)
}

// Gets array of functions annotated with #[test_case]
pub fn test_runner(tests: &[&dyn Testable]) {
    println!("Running {} tests", tests.len());
    for test in tests {
        test.run();
    }
    exit_qemu(QemuExitCode::Success);
}

// Prints panic error and quits qemu
pub fn test_panic_handler(info: &PanicInfo) -> ! {
    println!("[failed]\n");
    println!("Error: {}\n", info);
    exit_qemu(QemuExitCode::Failed);
    loop {}
}

pub fn hlt_loop() -> ! {
    loop {
        x86_64::instructions::hlt();
    }
}

/* Creates the `Testable` trait
 * which helps printing the test function name
 * in the logs when executing cargo test
 */
pub trait Testable {
    fn run(&self) -> ();
}

impl<T> Testable for T
where
    T: Fn(),
{
    fn run(&self) {
        print!("{}...\t", core::any::type_name::<T>());
        self();
        print!("[ok]\n");
    }
}
