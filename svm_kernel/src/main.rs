#![no_std]
#![no_main]
#![feature(custom_test_frameworks)]
#![test_runner(svm_kernel::test_runner)]
#![reexport_test_harness_main = "test_main"]

/*
 * Followed the tutorial here: https://os.phil-opp.com
 * TODO: Replace builtin memcpy, memset with optimized one
 */

/* TODO:
 * Write bootloader myself to be able to enable
 * mmx,sse & float features!
 * Should also solve the lto linktime warning
 */

/*
 * This kernel has been tested on an AMD x64 processor
 * family: 0x17h, model: 0x18h
 */

use log::{error, info, LevelFilter};
use svm_kernel::memory;
use svm_kernel::mylog::LOGGER;
use x86_64::structures::paging::{MapperAllSizes, Page};
use x86_64::VirtAddr;

use bootloader::{entry_point, BootInfo};

/*
 * KERNEL MAIN
 * The macro entry_point creates the nomangle _start func for us and checks that
 * the given function has the correct signature
 */
entry_point!(kernel_main);
fn kernel_main(boot_info: &'static BootInfo) -> ! {
    // Init & set logger level
    log::set_logger(&LOGGER).unwrap();
    log::set_max_level(LevelFilter::Info);

    // Initialize routine for kernel
    svm_kernel::init();

    let phys_mem_offset = VirtAddr::new(boot_info.physical_memory_offset);

    // new: initialize a mapper
    let mut mapper = unsafe { memory::init(phys_mem_offset) };

    let mut frame_allocator =  unsafe { 
        memory::BootInfoFrameAllocator::init(&boot_info.memory_map)
    };
    // map an unused page
    let page = Page::containing_address(VirtAddr::new(0xdeadbeaf000));
    memory::create_example_mapping(page, &mut mapper, &mut frame_allocator);

    // write the string `New!` to the screen through the new mapping
    let page_ptr: *mut u64 = page.start_address().as_mut_ptr();
    unsafe { page_ptr.offset(400).write_volatile(0x_f021_f077_f065_f04e) };

    let addresses = [
        // the identity-mapped vga buffer page
        0xb8000,
        // some code page
        0x201008,
        // some stack page
        0x0100_0020_1a10,
        // virtual address mapped to physical address 0
        boot_info.physical_memory_offset,
    ];

    for &address in &addresses {
        let virt = VirtAddr::new(address);
        // new: use the `mapper.translate_addr` method
        let phys = mapper.translate_addr(virt);
        log::info!("{:?} -> {:?}", virt, phys);
    }

    // This func gets generated by cargo test
    #[cfg(test)]
    test_main();

    // Sample output
    for i in 0..10 {
        info!("Hello World {}", i);
    }

    // Busy loop don't crash
    info!("Kernel going to loop now xoxo");
    svm_kernel::hlt_loop();
}

/*
 * KERNEL PANIC HANDLER
 * Not used in cargo test
 */
#[panic_handler]
fn panic(info: &core::panic::PanicInfo) -> ! {
    error!("{}", info);
    svm_kernel::hlt_loop();
}
